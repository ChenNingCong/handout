/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.6/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id "com.diffplug.spotless" version "6.25.0"
    id "com.github.spotbugs" version "6.0.10"
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit test framework.
    testImplementation libs.junit

    // This dependency is used by the application.
    implementation libs.guava

    spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.12.0'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'org.example.App'
}


spotless {
    java {
        // Use the default importOrder configuration
        importOrder()

        removeUnusedImports()

        // Cleanthat will refactor your code, but it may break your style: apply it before your formatter
        cleanthat()          // has its own section below

        // Choose one of these formatters.
        googleJavaFormat()   // has its own section below

        formatAnnotations()  // fixes formatting of type annotations, see below
    }
}

import com.github.spotbugs.snom.Confidence
import com.github.spotbugs.snom.Effort
spotbugs {
    ignoreFailures = false
    showStackTraces = true
    showProgress = true

    // https://discuss.kotlinlang.org/t/bug-cannot-use-kotlin-enum-from-groovy/1521
    // https://touk.pl/blog/2018/05/28/testing-kotlin-with-spock-part-2-enum-with-instance-method/
    effort = Effort.valueOf('DEFAULT')
    reportLevel = Confidence.valueOf('DEFAULT')
    visitors
//    visitors = [ 'FindSqlInjection', 'SwitchFallthrough' ]
//    omitVisitors = [ 'FindNonShortCircuit' ]
    reportsDir = file("$buildDir/spotbugs")
//    includeFilter = file("include.xml")
//    excludeFilter = file("exclude.xml")
//    baselineFile = file("baseline.xml")
//    onlyAnalyze = [ 'com.foobar.MyClass', 'com.foobar.mypkg.*' ]
    maxHeapSize = '1g'
    extraArgs = [ '-nested:false' ]
    jvmArgs = [ '-Duser.language=ja' ]
}

javadoc {
    destinationDir = file("${buildDir}/doc")
}

apply plugin: 'java'
compileJava {
    options.debug = project.hasProperty('debugBuild')
}
jar {
    manifest {
        def variant=project.hasProperty('debugBuild') ? "debug" : "release"
        archiveBaseName = "${project.name}-${variant}"
        attributes 'Main-Class': 'org.example.App'
    }
}
